
：：XFILE

レイ管理情報(あたり判定関数を自動的にやってくれる)


//============================================================
//ゲームのデータ構造（これが一つのクラスとなる）
//============================================================

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//ゲーム読み込みインターフェイス
//	仮想関数にはそれ用のデータが送られてきて、それに沿ってデータを作成する
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//エフェクト情報
//　実際にアニメーションを動作させながら作るエフェクトエディタみたいなものが必要になる
//　http://www.youtube.com/watch?v=2NXebTYiDz4&feature=player_embedded#at=39
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

エフェクト構造体
{
　アニメーションテクスチャ
　エフェクトの寿命(アニメーション回数など)
}
エフェクトのクラス　:自分の中で消える
{
　エフェクト構造体
　エフェクトの作成
　エフェクトの更新
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//キャラクタ情報
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

AI情報構造体
{
　AI番号（今はこれでよい）
}

アニメーションクラス
{
　継承して使用
　stringでアニメーションとマップ
　stringでアニメーションを再生
}

キャラクタ情報構造体
{
　体力　
　速度
　状態遷移(stringをイベント識別子とする,かはまだわからない)
　AI情報(AIクラスを使う)　：ポインタ
}

キャラクタ情報クラス
{
　円形物体を継承する
　状態により　アニメーションクラス（スクリプトで変えれる）：ポインタ
　(例)　移動、攻撃、アニメーション、消滅
　状態により　エフェクトクラスを定義　:ポインタ
　(例)　弾が当たった時のエフェクト、
　基本情報（体力、速度、半径、）
}

攻撃情報構造体
{
　攻撃の速さ	PhysicsCircleの速さかな？
　攻撃の大きさ	PhysicsCircleの半径かな？
　攻撃の寿命(長さ):これは、発射時に決まる
}
武器クラス情報
{
　発射される攻撃構造体
　発射される弾のバリ―ション番号(これは、ロジックで再現)　
	{
　		発射される攻撃の数
　		発射される攻撃の長さ
	}
	打つ
	攻撃中かどうか判断
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//マップ情報
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

マップ情報
{
　XFILE情報
　あたり判定マップ(FPS用)
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//移動情報
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

FPSキー情報構造体
{
　押されたキー情報
　押されている回数
}
FPSマウス情報構造体
{
　移動ベクトル
　移動した後の待ち回数(連続で移動する場合は0になっているはず)
}
FPSキー情報クラス
{
　キー構造体情報
　マウス構造体情報
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//イベント情報（イベントマネージャにイベントを送る）
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

範囲情報構造体
{
　始点範囲　(位置ベクトルと半径)
　終点範囲　(位置ベクトルと半径)　(あれば)
}
範囲情報インターフェイス
{
　イベント適用(Vector POS)　範囲内だったら適用
　終了するものがあるか管理
}

敵配置構造体
{
　範囲情報継承
　キャラ情報
　AI情報
　設置座標
}
敵配置イベントクラス
{
　範囲情報インターフェイス
　敵配置構造体配列
}

イベント情報構造体
{
　範囲情報継承
　テキスト情報
　カットイン情報
}
メッセージイベントクラス
{
　範囲情報インターフェイス
　イベント情報構造体配列
}

ゲーム状態構造体
{
　範囲情報継承
　ゲーム状態
}
ゲーム状態クラス
{
　範囲情報インターフェイス
　状態情報配列
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//ステージ情報
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ステージ情報(一つのステージを担当する)
{

	キャラ情報
		FPS情報用、キャラ情報
		初期化時にFPSビューとして生成
　
	FPS移動情報（キー情報）
	　	自動FPS用の（キー情報　更新情報）
		初期化時にキー情報ビューとして生成

	MAP情報
	　	設定されるMAPクラス　
		初期化時にマップビューとして生成

	敵出現イベント情報
	　 適用開始範囲座標空間
	　 ついかされるCHARAクラスと、AI情報、出現座標情報
		初期化時のイベントビューの一部になる

	メッセージ情報
	　	適用開始範囲座標空間
	　	表示されるメッセージイベントの内容
		初期化時のイベントビューの一部になる

	基本ゲーム状態情報
	　	ゲーム内でのアニメーション、ゲームの変わり目開始終端座標情報
		初期化時のイベントビューの一部になる

	初期化時に
	{
		イベントビューを作成する
		ゲームデータ構造クラスを持つ
	}
}

//============================================================
//VIEW情報
//　ビューは処理を受け持つものじゃない、促すものだ
//============================================================

//イベント管理ビュー
//　ロジックやビューから送られてくる情報によってイベントの設定などをする

ロジックに常駐するイベント発動用ビュー

ロジック作成時に作成
基本的に定期イベントを受け持つ

・敵出現イベント
・メッセージ作成イベント
・ゲームの状態イベント

これはイベントインターフェイスに入っているので
汎用的にこれからイベント増やすことが出来る

クリア時には

ロジックが				FPS_GameLogic
再発行してくれる

//物理ビュー
　//キャラクタビュー　(AIビューに組み込み)	FPS_Charactor
　　キャラクラスと武器クラスを入れる
　　//FPS主人公ビュー　FPS_Charactor_Hero
　　　主人公用
　　//敵ビュー				FPS_Charactor_Enemy
　　　敵用 　
　//弾ビュー ( 弾となる )	FPS_Bullet
　　発射された場合、攻撃構造体を入れた
　//マップビュー			FPS_Map
//エフェクトビュー		FPS_Effect




//AIビュー(キャラと弾を見る)
　//FPS情報ビュー			FPS_FpsMoveAI
　//FPS情報自動ビュー			FPS_FpsAutoAI
　//敵の行動ビュー通常					FPS_FpsEnemyAI			NORMAL_AI
　//敵の行動ビュー攻撃はなれる		FPS_FpsEnemyAttackLeaveAI	 ATTACK_LEAVE_AI

　//敵の行動ビューとまて攻撃		FPS_FpsEnemyStopAttackAI	STOP_ATTACK_AI				
　//敵の行動ビュー敵を投げてくる		FPS_FpsEnemyThrowAI	THROW_AI				

　//敵の行動ビューetc






//テキストビュー			FPS_TextWinodwView

//テキスト範囲監視ビュー FPS_TextWinodwRangeDecisionView
//敵出現範囲監視ビュー　"FPS_EnemyAppearRangeDecisionView"
//移動のストップとスタート　FPS_EnemyKillRangeDecisionView

//移動の軌跡を取得するビュー FPS_MovementPathView

//アドヴェンチャーパートのときのやつ　FPS_AdventureWinodwView

//タイトル	FPS_TitleView

//スコア		FPS_ScoreView

//モデル情報(接触時に、渡されるイベント情報)
イベント名	HERO_CHARACTOR
内容		主人公のキャラクタ	
イベント名	ENEMY_CHARACTOR
内容		敵のキャラクタ	
イベント名	BULLET_MODEL
内容		弾の情報		LPTkyBullet

//スコアビュー
	・発射数、ヒット率、スコア、時間、HP


//イベントビュー
　//メッセージビュー
　//カットインビュー
　//敵出現監視ビュー
　//ゲーム進行イベント
//============================================================
//フローチャートではないけどそのようなもの
//============================================================

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//作成時
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
アプリにてロジック作成
↓
アプリにてゲーム情報管理クラス作成(ロジックに入っている)
↓
ロジックにてゲーム情報管理クラスを使用してステージ情報読み込み
↓
ゲームスタート
↓
ゲーム終了メッセージにより次の情報へ
↓
終わり

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//敵出現
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
イベント情報インターフェイス内でループしている
↓
位置情報を引数にする
↓
合っている
↓
イベントマネージャーに敵ビューイベントを送る
↓
ロジックでイベント作成

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//弾を打つ
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
FPSビューでクリックを感知する
↓
キャラに応じた武器クラスのショットをする
↓
弾ビューの作成
↓
追加時にWorldの障害物を利用して範囲を取得
↓
武器クラスで弾ビューイベントを送る
↓
ロジックでイベント作成
↓
キャラクタで攻撃中か判断して攻撃中だったら
攻撃モーションを続ける

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//弾が当たる
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
キャラクラスのPhysicsCircleで衝突イベントを受ける
↓
敵と弾の衝突だったら
↓
敵のHPカウンタを減らす(当たり所やその他もろもろで値が変化する)
↓
弾が当たった状態にする

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//エフェクトの発生
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
攻撃したとき　：武器に依存
攻撃している最中　：攻撃に依存
敵に弾があたったとき　：敵に依存
自分に攻撃が当たったとき　：自分に依存
自分のHPが少ない時			：自分に依存
敵が死んだとき					：敵に依存
マップの効果					：マップに依存


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//消滅のタイミング
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//敵
敵ビューの更新時に消滅状態かどうか確認する
↓
消滅状態していたら
↓
消滅イベントを作成する
↓
AIビューからも消去イベントが出る
↓
ロジックで(キャラとAIを消す)消去する
↓
ロジックでオブジェクトから消去する？

//弾
弾ビューの更新時に消滅状態かどうか確認する
↓
消滅状態していたら
↓
消滅イベントを作成する
↓
ロジックで消去する
↓
ロジックでオブジェクトから消去する？

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//ゲームが終わる
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ゲーム進行ビューで判断
↓
終了メッセージを送る
↓
結果ビューの表示
↓
全部終了メッセージを送る
↓
次のデータを読み込み
↓
イベントの作成をする
↓
また始まる

//============================================================
//イベント情報
//============================================================

//エフェクトの追加
FPSLOGIC_ADDVIEW_EFFECT
CGameEffect * 
Vector pos
Vector rotate
Vector expand
DWORD type

//弾の追加
FPSLOGIC_ADDVIEW_BULLET
LPTkyWeapon weapon
Vector pos

//ビューの追加
LOGIC_ADDVIEW
LPTkyGameView

//ビューの消去
LOGIC_DELETEVIEW
LPTkyGameView


//敵の数チェック
ENEMY_CHECK
int

//移動の一時停止
MOVE_STOP

//移動の再開
MOVE_START

//ウィンドウ
WINDOWS_EVENT
UINT message = msg.m_value[0];
WPARAM wParam = msg.m_value[1]; 
LPARAM lParam = msg.m_value[2];

//ステージの終了
END_STAGE

//ステージをはじめからはじめから
RESET_STAGE

//シューティングステージの終了
END_SHOOTING_STAGE

//主人公の座標イベント
HERO_POSITION

//シェイドの開始
START_SHADE
DWORD ID

//シェイドアウトが終わった
END_SHADE_IN
DWORD ID

//シェイドが終わった
END_SHADE
DWORD ID

//テキストビューを消す
END_TEXTVIEW


//テキストビューを消す
SEND_SCORE;


//スコア情報イベント
SCORE_BATTERY
発射イベント
SCORE_HIT
ヒットイベント
SCORE_SCORE
通常スコア DWORD


//シェイドについて
START＿SHADEがおくられアプリケーションレイヤーで受け取る
LOGICの更新をとめてシェードOUTする
一回更新する
LOGICの更新をとめてシェードINする
END＿SHADEを送る



//============================================================
//ファイル情報
//============================================================
resource.txt
XFILE
[登録名前]<ファイルの名前>
TEXTURE
[登録名前]<ファイル名,個数,水平個数,垂直個数,幅,高さ,スピード>

charactor.txt
CHARACTOR
[キャラクタの名前,体力,速度,実際の大きさ]
[wstring,INT,INT,float]
<武器の発射遅れ,攻撃力,攻撃範囲,攻撃スピード,攻撃の長さ>
<float,int,float,float,float>
{アニメーションまたはエフェクト名,要素名,登録名前}
{wstring,wstring,wstring}
{END}		//ここまでという意味

range.txt

//============================================================
//データの読み込
//============================================================
//キャラ情報(状態)
CHARACTOR_STAND 
CHARACTOR_WALK 
CHARACTOR_HIT 
CHARACTOR_ATTACK 
CHARACTOR_DEAD 
CHARACTOR_NULL
CHARACTOR_THROW

 //武器情報(状態)
 WEAPON_NONE , 
 WEAPON_PRELAUNCH ,		//攻撃までの時間
 WEAPON_SHOT					//弾の発射

:::::::::::::::::::::::::::::::キャラクター:::::::::::::::::::::::::::::::::::
//アニメーションモデル情報(text情報)
TKYMODEL_STAND
TKYMODEL_WALK
TKYMODEL_HIT
TKYMODEL_DEAD

//エフェクト情報(text情報)
TKYEFFECT_DAMAGE

 //武器エフェクト
 WEAPON_EFFECT_FLASH	//フラッシュ時のエフェクト
 WEAPON_EFFECT_SHOT	//攻撃時のエフェクト

 //武器アニメーション
 WEAPON_ANIMATION_ATTACK	//フラッシュ時のエフェクト
 

//アニメーション
key = CHARACTOR_SET_ANIMATION
text = アニメーションモデルの情報
element = (LPTkyXFile)のキャストのDWORD

//エフェクト情報
key = CHARACTOR_SET_EFFECT
text = エッフェクト情報
element = (TGameEffect*)のキャストのDWORD

//基本情報
key = CHARACTOR_SET_BASEINFO
text = ""
element = (TCharaInfo*)のキャストのDWORD


//メニュー情報
{MENU_START}[title_start]
{MENU_SCORE}[title_score]
{MENU_BACK}[title_back]
{MENU_LOGO}[title_logo]

//ゲーム状態
TKYSCORE_PLAY
TKYSCORE_RESULT

:::::::::::::::::::::::::::::::武器:::::::::::::::::::::::::::::::::::
 //武器情報(text情報)

 //アニメーション
key = WEAPON_SET_ANIMATION
text = アニメーションモデルの情報
element = (LPTkyXFile)のキャストのDWORD

//エフェクト情報
key = WEAPON_SET_EFFECT
text = エッフェクト情報
element = (TGameEffect*)のキャストのDWORD

//基本情報(遅れのみ)
key = WEAPON_SET_BASEINFO
text = ""
element = (TWeaponInfo*)のキャストのDWORD

:::::::::::::::::::::::::::::::攻撃(弾):::::::::::::::::::::::::::::::::::

 //攻撃(弾)情報(text情報)

key = ATTACK_SET_BASEINFO
text = ""
element = (TBulletInfo*)のキャストのDWORD

:::::::::::::::::::::::::::::::テキスト情報:::::::::::::::::::::::::::::::::::

 //text情報

key = TEXT_SET_BASEINFO
text = ""
element = (TTextInfo*)のキャストのDWORD

 //ウィンドウ情報

key = TEXTWINODW_SET_BASEINFO
text = ""
element = (TTextWindowInfo*)のキャストのDWORD
